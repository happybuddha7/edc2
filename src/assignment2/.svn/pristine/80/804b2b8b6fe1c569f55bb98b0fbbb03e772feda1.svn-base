import java.util.HashSet;
import java.util.Set;

public class MapImpl implements Map{
    private Set<Place> Places;
    private Set<Road> Roads;
    private Place startPlace;
    private Place endPlace;
    public int tripDistance=0;

    public MapImpl(){
        this.Places=new HashSet<Place>();
        this.Roads=new HashSet<Road>();
        this.startPlace=null;
        this.endPlace=null;
        this.tripDistance=0;
    }
    @Override
    public void addListener(MapListener ml) {
    }

    @Override
    public void deleteListener(MapListener ml) {
    }

    @Override
    public Place newPlace(String placeName, int xPos, int yPos) throws IllegalArgumentException {
        PlaceImpl place = new PlaceImpl(placeName, xPos,yPos);
        this.Places.add(place);
        return place;
    }

    @Override
    public void deletePlace(Place s) {
    this.Places.remove(s);
    }

    @Override
    public Place findPlace(String placeName) {
        boolean exists=false;
        for (Place place : Places){
            if (place.getName()==placeName){
                return place;
                }
        }
        return null;
    }

    @Override
    public Set<Place> getPlaces() {
        return this.Places;
    }

    @Override
    public Road newRoad(Place from, Place to, String roadName, int length) throws IllegalArgumentException {
        RoadImpl road= new RoadImpl(from,to,roadName,length);
        Roads.add(road);
        return road;
    }

    @Override
    public void deleteRoad(Road r) {
    this.Roads.remove(r);
    }

    @Override
    public Set<Road> getRoads() {
        return this.Roads;
    }

    @Override
    public void setStartPlace(Place p) throws IllegalArgumentException {
        if (Places.contains(p)){
            this.startPlace=p;
        }
        else {
            this.newPlace(p.getName(),p.getX(),p.getY());
            this.startPlace=p;
        }
    }

    @Override
    public Place getStartPlace() {
        return this.startPlace;
    }

    @Override
    public void setEndPlace(Place p) throws IllegalArgumentException {
        if (Places.contains(p)){
            this.endPlace=p;
        }
        else {
            this.newPlace(p.getName(),p.getX(),p.getY());
            this.endPlace=p;
        }
    }

    @Override
    public Place getEndPlace() {
        return this.endPlace;
    }

    @Override
    public int getTripDistance() {
        return this.tripDistance;
    }


    public class PlaceImpl implements Place {
        public Set<Road> toRoads;
        public Set<Road> fromRoads;
        public String name;
        public int x;
        public int y;

        public PlaceImpl(String name, int x, int y){
            this.toRoads= new HashSet<Road>();
            this.fromRoads=new HashSet<Road>();
            this.name=name;
            this.x=x;
            this.y=y;
        }

        public void addListener(PlaceListener pl) {
        }

        public void deleteListener(PlaceListener pl) {
        }

        public Set<Road> toRoads() {
            return this.toRoads;
        }

        public Road roadTo(Place dest) {
            return null;
        }

        public void moveBy(int dx, int dy) {
        }

        public String getName() {
            return this.name;
        }

        public int getX() {
            return this.x;
        }

        public int getY() {
            return this.y;
        }

        public boolean isStartPlace() {
            return false;
        }

        public boolean isEndPlace() {
            return false;
        }
    }

    public class RoadImpl implements Road {
        public Place from;
        public Place to;
        public String roadNameString;
        public int roadLength;

        public RoadImpl(Place from, Place to, String roadName, int roadLength){
            this.from=from;
            this.to=to;
            this.roadNameString=roadName;
            this.roadLength=roadLength;
        }
        @Override
        public void addListener(RoadListener rl) {

        }

        @Override
        public void deleteListener(RoadListener rl) {

        }

        @Override
        public Place firstPlace() {
            return null;
        }

        @Override
        public Place secondPlace() {
            return null;
        }

        @Override
        public boolean isChosen() {
            return false;
        }

        @Override
        public String roadName() {
            return roadNameString;
        }

        @Override
        public int length() {
            return 0;
        }
    }




}
